desc:PoulpyLoop_v0600 // debut simplification
options:maxmem=32000000
options:gmem=PoulpyLoopy

in_pin:Left In
in_pin:Right In
out_pin:Left Out
out_pin:Right Out

slider1:40<0,256,1>Fade (échantillons)
slider2:0.0<-24,24,1>Pitch Control
slider3:0<0,1,1{OFF,ON}>Monitoring à l'arrêt
slider4:0<0,127,1>Mod 1 Start
slider5:0<0,127,1>Mod 2 Start
slider6:0<0,127,1>Mod 3 Start
slider7:0<0,127,1>Mod 4 Start
slider8:0<0,127,1>Mod 5 Start
slider9:0<0,127,1>Mod 6 Start
slider10:0<0,127,1>Mod 7 Start
slider11:0<0,127,1>Mod 8 Start
slider12:0<0,127,1>Mod 9 Start
slider13:0<0,127,1>Mod 10 Start

@init

ext_noinit = 1;

NUM_NOTES = 128;
UNIT_SIZE = 4096 * 64;
max_units = 32000000 / UNIT_SIZE;


debug_str     = 0;
debug_str2    = 50; // Nouveau buffer pour le débogage
time_left_str = 100;
current_display= 200;
note_start    = 300;
note_length   = note_start    + NUM_NOTES;
units_count   = note_length   + NUM_NOTES;
is_playing    = units_count   + NUM_NOTES;
is_recording  = is_playing    + NUM_NOTES;
read_pos      = is_recording  + NUM_NOTES;
rec_mode      = read_pos      + NUM_NOTES;
next_free_unit = rec_mode     + NUM_NOTES;
modulation_values = next_free_unit + NUM_NOTES;
// Réservation mémoire pour la liste des notes actives (128 max)
active_notes = modulation_values + 20; // 128 cases pour les notes actives
// Mémoire audio principale, commence juste après active_notes
// (aucun risque de collision avec les autres structures)
the_memory = active_notes + NUM_NOTES;
num_active_notes = 0;

// Variable unique pour la longueur temporaire
temp_block_length = 0;

i = 0;
loop(NUM_NOTES,
  note_start[i] = 0;
  note_length[i] = 0;
  units_count[i] = 0;
  is_playing[i] = 0;
  is_recording[i] = 0;
  read_pos[i] = 0;
  rec_mode[i] = 0;
  block_length[i] = 0; // Initialisation de block_length
  i += 1;
);
next_free_unit[0] = 0;

i = 0;
loop(NUM_NOTES,
  loop_type[i] = -1;
  i += 1;
);

//strcpy(current_display, "Sampler init OK");
strcpy(time_left_str, "Loading...");
strcpy(debug_str, "");
strcpy(debug_str2, "");

volumeFactor = 1.0;
panFactor    = 0.5;
mode = 0;
monitoring = 1; // Par défaut, le monitoring est activé (ON)

last_loop_type = -2;
last_loop_mode = -2;
last_volume = -1.0;
last_pan = -1.0;
last_monitoring = -1;

// Variable pour stocker le dernier pitch
last_pitch = 0.5; // Valeur par défaut (milieu)

play_state = 0;
track_id_found = -1;

// Variables pour les paramètres de modulation
MODULATION_COUNT = 10; // Nombre de paires de valeurs (début/fin)
MODULATION_SIZE = MODULATION_COUNT * 2; // Taille totale du tableau (20 valeurs)

// Indices gmem pour les modes
GMEM_RECORD_MONITOR_MODE = 0;  // gmem[0] pour le mode d'enregistrement des loops MONITOR
GMEM_PLAYBACK_MODE = 1;        // gmem[1] pour le mode LIVE/PLAYBACK
GMEM_STATS_BASE = 2;           // gmem[2] à gmem[2+64*3-1] pour les statistiques (64 instances max)
GMEM_NEXT_INSTANCE_ID = 194;   // gmem[194] pour le prochain ID d'instance disponible
GMEM_MONITORING_STOP_BASE = 195;  // gmem[195] à gmem[195+64-1] pour le monitoring à l'arrêt (64 instances max)
GMEM_NOTE_START_POS_BASE = 259;  // gmem[259] à gmem[259+64*128-1] pour les positions de début des notes (64 instances * 128 notes)
GMEM_LOOP_LENGTH_BASE = 8451;    // gmem[8451] à gmem[8451+64*128-1] pour les longueurs des boucles en secondes (64 instances * 128 notes)

// Chercher un ID unique pour cette instance
function get_unique_instance_id()
(
  // Lire le prochain ID disponible
  next_id = gmem[GMEM_NEXT_INSTANCE_ID];
  
  // Si c'est la première fois, initialiser à 0
  (next_id == 0) ? next_id = 0;
  
  // Incrémenter pour la prochaine instance
  gmem[GMEM_NEXT_INSTANCE_ID] = (next_id + 1) % 64;
  
  // Retourner l'ID attribué
  next_id;
);

// Attribuer un identifiant unique à cette instance
instance_id = get_unique_instance_id();  // Un identifiant entre 0 et 63

// Fonctions utilitaires pour les paramètres de modulation
function init_modulation_values()
(
  // Initialiser toutes les valeurs à 0
  i = 0;
  loop(MODULATION_SIZE,
    modulation_values[i] = 0;
    i += 1;
  );
);

function get_modulation_start(index)
(
  (index >= 0 && index < MODULATION_COUNT) ? modulation_values[index * 2] : 0;
);

function get_modulation_end(index)
(
  (index >= 0 && index < MODULATION_COUNT) ? modulation_values[index * 2 + 1] : 0;
);

function set_modulation_start(index, value)
(
  (index >= 0 && index < MODULATION_COUNT) ? (
    modulation_values[index * 2] = value;
    1;
  ) : 0;
);

function set_modulation_end(index, value)
(
  (index >= 0 && index < MODULATION_COUNT) ? (
    modulation_values[index * 2 + 1] = value;
    1;
  ) : 0;
);

// Fonction pour récupérer le mode d'enregistrement des loops MONITOR
function get_record_monitor_loops_mode()
(
  gmem[GMEM_RECORD_MONITOR_MODE];
);

// Fonction pour récupérer le mode LIVE/PLAYBACK
function get_playback_mode()
(
  gmem[GMEM_PLAYBACK_MODE];
);

// Fonction pour mettre à jour les statistiques dans gmem
function update_stats()
(
  // Base pour les statistiques de cette instance
  stats_base = GMEM_STATS_BASE + instance_id * 3;
  
  // Calculer la mémoire utilisée en Mo (8 octets par échantillon car format 64 bits)
  memory_used_mb = (next_free_unit[0] * UNIT_SIZE * 8) / (1024 * 1024);
  gmem[stats_base] = memory_used_mb;
  
  // Calculer le temps restant en secondes
  memory_left_seconds = time_left;
  gmem[stats_base + 1] = memory_left_seconds;
  
  // Compter le nombre de notes actives
  notes_count = 0;
  i = 0;
  loop(NUM_NOTES,
    (note_length[i] > 0) ? notes_count += 1;
    i += 1;
  );
  gmem[stats_base + 2] = notes_count;
);

function cc7ToGain(ccVal)
(
  dB = (ccVal - 64) * (20.0/64.0);
  10^(dB/20.0);
);

function cc10ToPan(ccVal)
(
  ccVal / 127.0;
);

function getNoteIndex(note)
(
  (note >= 0 && note < 128) ? note : -1;
);

function startRecording(note, mode)
(
  // En mode PLAYBACK, on n'enregistre pas
  (get_playback_mode() == 1) ? (
    sprintf(current_display, "PLAYBACK mode : recording disabled");
    0; // Ne rien faire
  ) : (
    note_length[note] = 0;
    units_count[note] = 1;
    is_recording[note] = 1;
    is_playing[note] = 0;
    read_pos[note] = 0;
    rec_mode[note] = mode;
    nu = next_free_unit[0];
    (nu >= max_units) ? (
      is_recording[note] = 0;
      note_start[note] = 0;
      strcpy(current_display, "Memo saturée: impossible rec");
    ) : (
      note_start[note] = nu * UNIT_SIZE;
      next_free_unit[0] = nu + 1;
    );
  );
);

function expandRecording(note)
(
  // En mode PLAYBACK, on n'étend pas l'enregistrement
  (get_playback_mode() == 1) ? (
    0; // Ne rien faire
  ) : (
    nu = next_free_unit[0];
    curUnits = units_count[note];
    (nu < max_units) ? (
      units_count[note] = curUnits + 1;
      next_free_unit[0] = nu + 1;
    ) : (
      is_recording[note] = 0;
      strcpy(current_display, "Memo full en cours d'enregistrement");
    );
  );
);

@slider
fade_samples = slider1;
// Mettre à jour gmem avec l'état du monitoring à l'arrêt
gmem[GMEM_MONITORING_STOP_BASE + instance_id] = slider3;

@block
// Initialiser les valeurs de modulation si ce n'est pas déjà fait
(modulation_values == 0) ? init_modulation_values();

// Synchroniser le slider avec gmem
slider3 = gmem[GMEM_MONITORING_STOP_BASE + instance_id];

// Debug: afficher les valeurs importantes
sprintf(debug_str2, "");

// Mise à jour des sliders de modulation
i = 0;
loop(NUM_NOTES,
  (loop_type[i] >= 0) ? (
    // Debug pour les blocs MONITOR
    (loop_type[i] == 3) ? (
      sprintf(debug_str2, "MONITOR - Note %d:\n", i);
      sprintf(debug_str2, "%stype=%d, is_playing=%d, is_recording=%d\n", 
        debug_str2, loop_type[i], is_playing[i], is_recording[i]);
      sprintf(debug_str2, "%spos=%.1f, temp_length=%.1f\n", 
        debug_str2, read_pos[i] / srate * 10, temp_block_length);
    );
    
    // Calculer le pourcentage de progression dans la loop
    progress = 0;
    
    // Utiliser temp_block_length pour RECORD et MONITOR
    ((is_recording[i] || loop_type[i] == 3) && temp_block_length > 0) ? (
      progress = (read_pos[i] / srate * 10) / temp_block_length;
      progress = min(progress, 1); // S'assurer que progress ne dépasse pas 1
      
      // Debug pour les blocs MONITOR
      (loop_type[i] == 3) ? (
        sprintf(debug_str2, "%sprogress=%.3f\n", debug_str2, progress);
      );
    ) : (
      // Pour les autres blocs, utiliser note_length
      (note_length[i] > 0) ? (
        progress = read_pos[i] / note_length[i];
      );
    );
    
    // Si on a une progression valide, mettre à jour les sliders
    (progress > 0) ? (
      j = 0;
      loop(MODULATION_COUNT,
        start_val = get_modulation_start(j);
        end_val = get_modulation_end(j);
        
        // Interpolation linéaire
        current_val = start_val + (end_val - start_val) * progress;
        
        // Debug pour les blocs MONITOR (premier paramètre seulement)
        (loop_type[i] == 3 && j == 0) ? (
          sprintf(debug_str2, "%sMod 1: %.1f -> %.1f (current=%.1f)", 
            debug_str2, start_val, end_val, current_val);
        );
        
        // Mise à jour du slider correspondant
        slider(j + 4) = current_val;
        
        j += 1;
      );
    );
  );
  i += 1;
);

// Obtenir la position de lecture actuelle
play_position = play_position_samples / srate;

// Détection simple de l'état de lecture
prev_play_state = play_state;
play_state = (play_state > 0) ? 1 : 0;

// Variable pour suivre si des notes ont été traitées dans ce bloc
midi_notes_processed = 0;

while (
  midirecv(offset, msg1, msg2, msg3) ? (
    status = msg1 & $xF0;
    note   = msg2;
    vel    = msg3;
    idx    = getNoteIndex(note);
    
    // Augmenter le compteur de notes MIDI traitées
    (status == $x90 && vel > 0) ? (
      midi_notes_processed += 1;
    );

    (status == $xB0) ? (
      (idx >= 0) ? (
        (msg2 == 7) ? (
            volumeFactor = cc7ToGain(msg3);
        ) : (msg2 == 9) ? (
            slider2 = msg3 - 64;
        ) : (msg2 == 10) ? (
            panFactor = cc10ToPan(msg3);
        ) : (msg2 == 8) ?(
            mode = msg3;
        ) : (msg2 == 11) ? (
            monitoring = msg3 > 0 ? 1 : 0;
        ) : (msg2 == 19) ? (
            temp_block_length = msg3 * 128;
        ) : (msg2 == 20) ? (
            temp_block_length += msg3;
        ) : (msg2 >= 21 && msg2 <= 40) ? (
            // Traitement des CC 21-40 pour les valeurs de modulation
            mod_index = floor((msg2 - 21) / 2);
            is_end = (msg2 - 21) % 2;
            (is_end == 0) ? (
                set_modulation_start(mod_index, msg3);              
            ) : (
                set_modulation_end(mod_index, msg3);
            );
        );
      );
    );

    (status == $x90 && vel > 0) ? (  // Note ON
      (idx >= 0) ? (
        // Ajout à la liste des notes actives si pas déjà présente
        found = 0;
        j = 0;
        loop(num_active_notes,
          (active_notes[j] == idx) ? (found = 1;);
          j += 1;
        );
        (found == 0) ? (
          active_notes[num_active_notes] = idx;
          num_active_notes += 1;
        );

        // Pour les blocs RECORD ou MONITOR, afficher la longueur attendue
        ((vel == 1 || vel == 4) && temp_block_length > 0) ? (
          sprintf(debug_str2, "Expected length: %.1f tenth of a second", temp_block_length);
        );

        // Debug: afficher le type de note reçue
        sprintf(debug_str2, "%s\nNote ON: idx=%d, vel=%d", debug_str2, idx, vel);
        
        // Stocker la position de début de la note dans gmem
        note_pos_index = GMEM_NOTE_START_POS_BASE + instance_id * 128 + idx;
        gmem[note_pos_index] = play_position;
        
        // Afficher les valeurs de modulation pour cette note
        sprintf(debug_str, "\n\nModulations for note %d:", idx);
        i = 0;
        loop(MODULATION_COUNT,
          start_val = get_modulation_start(i);
          end_val = get_modulation_end(i);
          sprintf(debug_str, "%s\nMod %d: %.2f -> %.2f", debug_str, i+1, start_val, end_val);
          
          // Mettre à jour les sliders avec les valeurs de début
          slider(i + 4) = start_val;
          
          i += 1;
        );
        
        // Stocker la longueur de la boucle en secondes si elle existe
        loop_len_index = GMEM_LOOP_LENGTH_BASE + instance_id * 128 + idx;
        (note_length[idx] > 0) ? (
          gmem[loop_len_index] = note_length[idx] / srate;
        ) : (
          gmem[loop_len_index] = -1;
        );
        
        // Vérifier si on est en mode PLAYBACK
        playback_mode = get_playback_mode();
        
        (vel == 1) ? ( // RECORD
          (playback_mode == 1) ? (
            // En mode PLAYBACK, on lit la loop RECORD si elle existe
            (note_length[idx] > 0) ? (
              is_playing[idx] = 1;
              read_pos[idx] = 0;
              is_recording[idx] = 0;
              loop_type[idx] = 0; // Garder le type RECORD
              sprintf(current_display, "Playback: playing RECORD note=%d", note);
            ) : (
              sprintf(current_display, "Playback: no content for RECORD note=%d", note);
            );
          ) : (
            // En mode LIVE, comportement normal
            startRecording(idx, mode);
            loop_type[idx] = 0;
            sprintf(current_display, "Rec note=%d vel=%d mode=%s", note, vel, mode ? "Stereo" : "Mono");
          );
        )
        : (vel == 2) ? ( // PLAY
          (note_length[idx] > 0) ? (
            is_playing[idx] = 1;
            
            // Ne plus appliquer l'offset ici, juste commencer au début
            read_pos[idx] = 0;
            sprintf(debug_str2, "PLAY: note=%d pos=0/%d", note, note_length[idx]);
            
            is_recording[idx] = 0;
            loop_type[idx] = 1;
          ) : sprintf(current_display, "No sample for %d", note)
        )
        : (vel == 3) ? ( // OVERDUB
          (playback_mode == 1) ? (
            // En mode PLAYBACK, on lit la loop OVERDUB si elle existe
            (note_length[idx] > 0) ? (
              is_playing[idx] = 1;
              
              // Ne plus appliquer l'offset ici non plus
              read_pos[idx] = 0;
              sprintf(debug_str2, "OVERDUB: note=%d pos=0/%d", note, note_length[idx]);
              
              is_recording[idx] = playback_mode == 0;
              loop_type[idx] = 2;
            ) : (
              sprintf(current_display, "Playback: no content for OVERDUB note=%d", note);
            );
          ) : (
            // En mode LIVE, comportement normal
            //Si la boucle n'existait pas, on démarre un enregistrement normal.
            (note_length[idx] == 0) ? (
              startRecording(idx, mode);
            ) : (
              is_recording[idx] = 1;  // Activer l'enregistrement
              read_pos[idx] = 0;      // Réinitialisation de la position de lecture
            );
            loop_type[idx] = 2;
            is_playing[idx] = 1;      // Activer la lecture en mode OVERDUB
            sprintf(current_display, "Overdub note=%d vel=%d mode=%s", note, vel, mode ? "Stereo" : "Mono");
          );
        )
        : (vel == 4) ? ( // MONITOR
          (playback_mode == 1) ? (
            // En mode PLAYBACK, on lit la loop MONITOR si elle existe
            (note_length[idx] > 0) ? (
              is_playing[idx] = 1;
              read_pos[idx] = 0;
              is_recording[idx] = 0; // Pas d'enregistrement en mode PLAYBACK
              loop_type[idx] = 3; // Garder le type MONITOR
              sprintf(debug_str2, "%s\nMONITOR: playback mode", debug_str2);
            );
          ) : (
            // En mode LIVE, comportement normal
            is_playing[idx] = 1;
            loop_type[idx] = 3;
            sprintf(debug_str2, "%s\nMONITOR: live mode, type=%d", debug_str2, loop_type[idx]);
            
            // Vérifier si on doit enregistrer les loops MONITOR
            record_monitor_mode = get_record_monitor_loops_mode();
            (record_monitor_mode == 1) ? (
              // Si le mode est activé, on enregistre comme pour RECORD
              startRecording(idx, mode);
            );
          );
        )
        : sprintf(current_display, "Vel. not supported: %d", vel)
      );
    );

    (status == $x80 || (status == $x90 && vel == 0)) ? ( // NOTE OFF
      (idx >= 0) ? (
        // Réinitialiser la position de début de la note
        note_pos_index = GMEM_NOTE_START_POS_BASE + instance_id * 128 + idx;
        gmem[note_pos_index] = -1;
        
        is_playing[idx] = 0;
        is_recording[idx] = 0;
        loop_type[idx] = -1;
        // Remettre le pitch à sa valeur par défaut quand aucune boucle n'est active
        any_playing = 0;
        i = 0;
        loop(NUM_NOTES,
          any_playing += (loop_type[i] == 1);
          i += 1;
        );
        (any_playing == 0) ? (
          // Envoyer CC09 = 64 pour un pitch de 0
          midisend(offset, $xB0, 9, 64);
        );
        strcpy(current_display, "Note off");

        // Retrait de la liste des notes actives
        j = 0;
        loop(num_active_notes,
          (active_notes[j] == idx) ? (
            k = j;
            loop(num_active_notes - j - 1,
              active_notes[k] = active_notes[k+1];
              k += 1;
            );
            num_active_notes -= 1;
            break;
          );
          j += 1;
        );
      );
    );
    offset += 1;
  );
);

units_used = next_free_unit[0];
units_left = max_units - units_used;
samples_left = units_left * UNIT_SIZE;
time_left = samples_left / srate;
sprintf(time_left_str, "Memo left: %.1f s", time_left);

// Mettre à jour les statistiques dans gmem
update_stats();



@sample
inL = spl0;
inR = spl1;

recL = 0;
recR = 0;
playL = 0;
playR = 0;
monL = 0;
monR = 0;

// Calcul des gains pour le pan sinusoïdal
gainL = cos($pi * 0.5 * panFactor) * sqrt(2);
gainR = sin($pi * 0.5 * panFactor) * sqrt(2);

// Variable pour détecter si au moins une boucle est active
any_loop_active = 0;

// Vérifier si on est en mode PLAYBACK
playback_mode = get_playback_mode();

i = 0;
loop(num_active_notes,
  n = active_notes[i];
  (loop_type[n] != -1) ? (  // Boucle active
    any_loop_active = 1;
    curLen = note_length[n];
    unitCount = units_count[n];
    capacity = unitCount * UNIT_SIZE;
    
    // Incrémenter read_pos pour la lecture, l'enregistrement et les blocs MONITOR
    ((is_playing[n] || is_recording[n] || loop_type[n] == 3) && (curLen > 0 || is_recording[n] || loop_type[n] == 3)) ? (
      read_pos[n] += 1;
      // Pour les blocs MONITOR, on boucle sur temp_block_length
      (loop_type[n] == 3 && temp_block_length > 0) ? (
        (read_pos[n] >= temp_block_length * srate / 10) ? read_pos[n] = 0;
      ) : (
        // Pour les autres blocs, on boucle sur note_length
        (read_pos[n] >= curLen && !is_recording[n]) ? read_pos[n] = 0;
      );
      pos = read_pos[n];
      
      // Calculer la position de lecture effective avec l'offset
      effective_pos = pos;
    ) : (
      // Si pas en lecture/enregistrement, maintenir la position actuelle
      pos = read_pos[n];
      effective_pos = pos;
    );
    
    // Lire le contenu actuel si en lecture ou en mode particulier
    ((is_playing[n] && curLen > 0) || playback_mode == 1) ? (
      // Calcul des enveloppes de fade
      fade_gain = 1.0;
      (fade_samples > 0) ? (
        (effective_pos < fade_samples) ? (
          fade_gain = effective_pos / fade_samples;
        ) : (effective_pos >= curLen - fade_samples) ? (
          fade_gain = (curLen - effective_pos) / fade_samples;
        );
      );
      
      (rec_mode[n] == 0) ? ( // MONO
        sampleMono = the_memory[note_start[n] + effective_pos];
        playL += sampleMono * volumeFactor * gainL * fade_gain;
        playR += sampleMono * volumeFactor * gainR * fade_gain;
      ) : ( // STEREO
        baseOfs = note_start[n] + 2*effective_pos;
        sampleL = the_memory[baseOfs];
        sampleR = the_memory[baseOfs+1];
        playL += sampleL * volumeFactor * gainL * fade_gain;
        playR += sampleR * volumeFactor * gainR * fade_gain;
      );
    );

    // Gérer l'enregistrement après la lecture (uniquement en mode LIVE)
    (playback_mode == 0 && (loop_type[n] == 0 || loop_type[n] == 2 || (loop_type[n] == 3 && get_record_monitor_loops_mode() == 1))) ? (
      // Appliquer volume/pan/mode *COURANTS* avant l'enregistrement
      (mode == 0) ? ( // Mono
        recL = inL * gainL;  // Enlever volumeFactor ici
        recR = inL * gainR;  // Même signal en mono, enlever volumeFactor ici
      ) : ( // Stereo
        recL = inL * gainL;  // Enlever volumeFactor ici
        recR = inR * gainR;  // Enlever volumeFactor ici
      );

      // Position d'écriture - pour OVERDUB, utiliser le même loopPos que pour la lecture
      writePos = (loop_type[n] == 2) ? (pos % curLen) : curLen;
      
      (loop_type[n] == 0 || loop_type[n] == 3) ? (  // RECORD ou MONITOR avec enregistrement
        (rec_mode[n] == 0) ? ( // Mono
          the_memory[note_start[n] + writePos] = recL;
        ) : ( // Stereo
          the_memory[note_start[n] + 2*writePos] = recL;
          the_memory[note_start[n] + 2*writePos+1] = recR;
        );
        // Debug : afficher l'état d'enregistrement
        sprintf(debug_str2, "REC n=%d curLen=%d cap=%d note_length=%d is_rec=%d", n, curLen, capacity, note_length[n], is_recording[n]);
        // Correction : forcer note_length[n]=1 dès le premier sample
        note_length[n] = (curLen == 0) ? 1 : curLen + 1;
        (curLen + 1 >= capacity) ? (expandRecording(n));
      ) : (  // OVERDUB - ici on ADDITIONNE au lieu de remplacer
        (curLen > 0) ? (  // Seulement si on a déjà du contenu
          (rec_mode[n] == 0) ? ( // Mono
            the_memory[note_start[n] + writePos] += recL;
          ) : ( // Stereo
            the_memory[note_start[n] + 2*writePos] += recL;
            the_memory[note_start[n] + 2*writePos+1] += recR;
          );
        ) : (
          // Si longueur=0 en OVERDUB, traiter comme RECORD
          (rec_mode[n] == 0) ? ( // Mono
            the_memory[note_start[n] + writePos] = recL;
          ) : ( // Stereo
            the_memory[note_start[n] + 2*writePos] = recL;
            the_memory[note_start[n] + 2*writePos+1] = recR;
          );
          // Correction : forcer note_length[n]=1 dès le premier sample
          note_length[n] = 1;
          (curLen + 1 >= capacity) ? (expandRecording(n));
        );
      );
    );
  );
  i += 1;
);

// Monitoring avec pan sinusoïdal (uniquement si une boucle est active, qu'on n'est pas en mode PLAYBACK
// ET que la lecture est active OU que le monitoring à l'arrêt n'est pas activé)
(monitoring && any_loop_active && playback_mode == 0 && (play_state || !slider3)) ? (
  (mode == 0) ? ( // Mono 
    monL = inL * volumeFactor * gainL;
    monR = inL * volumeFactor * gainR;  // Même signal en mono
  ) : ( // Stereo
    monL = inL * volumeFactor * gainL;
    monR = inR * volumeFactor * gainR;
  );
);

// Complètement réorganiser la logique de sortie pour éviter les additifs
(!play_state && slider3) ? (
  // Monitoring à l'arrêt est prioritaire quand lecture arrêtée - signal DIRECT sans traitement
  spl0 = inL;
  spl1 = inR;
) : (
  // Lecture normale, uniquement le contenu joué + monitoring normal
  spl0 = playL;
  spl1 = playR;
  
  // Ajouter le monitoring UNIQUEMENT si on n'est pas en mode monitoring à l'arrêt
  (!(!play_state && slider3)) ? (
    spl0 += monL;
    spl1 += monR;
  );
);

@gfx
gfx_clear = 0;
gfx_setfont(1, "Arial", 30);
gfx_set(1,1,1,1);


// Afficher l'état de lecture en haut
gfx_x = 10;
gfx_y = 10;
gfx_set(1, 1, 1, 1);
gfx_drawstr("Playstate: ");
gfx_x += 200;
(play_state >= 1) ? (
  gfx_set(0.5, 1, 0.5, 1); // Vert pour LECTURE
  gfx_drawstr("PLAYING");
) : (
  gfx_set(1, 0.5, 0.5, 1); // Rouge pour ARRÊTÉ
  gfx_drawstr("STOPPED");
);

// Afficher le mode actuel
playback_mode = get_playback_mode();
gfx_x = 10;
gfx_y = 50;

(playback_mode != 1) ? (
  gfx_set(1, 0.5, 0.5, 1); // ROUGE pour LIVE
  gfx_drawstr("Mode: LIVE");
) : (
  gfx_set(0.5,1, 0.5, 1); // VERT pour PLAYBACK
  gfx_drawstr("Mode: PLAYBACK");
);
// Afficher la longueur attendue si présente
gfx_x = 10;
gfx_y = 90;
gfx_set(1, 1, 1, 1);
gfx_drawstr(debug_str2);

// Afficher le temps restant
gfx_x = 10;
gfx_y = 130;
gfx_drawstr(time_left_str);
